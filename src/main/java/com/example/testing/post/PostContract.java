package com.example.testing.post;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class PostContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_CREATEPOST = "createPost";

    public static final String FUNC_GETPOST = "getPost";

    public static final String FUNC_GETPOSTSBYNAME = "getPostsByName";

    public static final String FUNC_POSTCOUNT = "postCount";

    public static final String FUNC_POSTS = "posts";

    @Deprecated
    protected PostContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected PostContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected PostContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected PostContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> createPost(String _userId, String _userNickname, String _userPhone, String _postId, String _postImagesUrl, String _postTitle, String _postPrice, BigInteger _createdAt) {
        final Function function = new Function(
                FUNC_CREATEPOST,
                Arrays.<Type>asList(new Utf8String(_userId),
                        new Utf8String(_userNickname),
                        new Utf8String(_userPhone),
                        new Utf8String(_postId),
                        new Utf8String(_postImagesUrl),
                        new Utf8String(_postTitle),
                        new Utf8String(_postPrice),
                        new Uint256(_createdAt)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, String, String>> getPost(BigInteger _postId) {
        final Function function = new Function(FUNC_GETPOST,
                Arrays.<Type>asList(new Uint256(_postId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, String, String>>(function,
                new Callable<Tuple5<String, String, BigInteger, String, String>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, String, String>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<List<Post>, BigInteger>> getPostsByName(String _userId) {
        final Function function = new Function(FUNC_GETPOSTSBYNAME,
                Arrays.<Type>asList(new Utf8String(_userId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Post>>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<List<Post>, BigInteger>>(function,
                new Callable<Tuple2<List<Post>, BigInteger>>() {
                    @Override
                    public Tuple2<List<Post>, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<Post>, BigInteger>(
                                convertToNative((List<Post>) results.get(0).getValue()),
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> postCount() {
        final Function function = new Function(FUNC_POSTCOUNT,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple8<String, String, String, String, String, String, String, BigInteger>> posts(BigInteger param0) {
        final Function function = new Function(FUNC_POSTS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple8<String, String, String, String, String, String, String, BigInteger>>(function,
                new Callable<Tuple8<String, String, String, String, String, String, String, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, String, String, String, String, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, String, String, String, String, String, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    @Deprecated
    public static PostContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new PostContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static PostContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new PostContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static PostContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new PostContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static PostContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new PostContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<PostContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PostContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PostContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PostContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<PostContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(PostContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<PostContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(PostContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class Post extends DynamicStruct {
        public String userId;

        public String userNickname;

        public String userPhone;

        public String postId;

        public String postImagesUrl;

        public String postTitle;

        public String postPrice;

        public BigInteger createdAt;

        public Post(String userId, String userNickname, String userPhone, String postId, String postImagesUrl, String postTitle, String postPrice, BigInteger createdAt) {
            super(new Utf8String(userId),
                    new Utf8String(userNickname),
                    new Utf8String(userPhone),
                    new Utf8String(postId),
                    new Utf8String(postImagesUrl),
                    new Utf8String(postTitle),
                    new Utf8String(postPrice),
                    new Uint256(createdAt));
            this.userId = userId;
            this.userNickname = userNickname;
            this.userPhone = userPhone;
            this.postId = postId;
            this.postImagesUrl = postImagesUrl;
            this.postTitle = postTitle;
            this.postPrice = postPrice;
            this.createdAt = createdAt;
        }

        public Post(Utf8String userId, Utf8String userNickname, Utf8String userPhone, Utf8String postId, Utf8String postImagesUrl, Utf8String postTitle, Utf8String postPrice, Uint256 createdAt) {
            super(userId, userNickname, userPhone, postId, postImagesUrl, postTitle, postPrice, createdAt);
            this.userId = userId.getValue();
            this.userNickname = userNickname.getValue();
            this.userPhone = userPhone.getValue();
            this.postId = postId.getValue();
            this.postImagesUrl = postImagesUrl.getValue();
            this.postTitle = postTitle.getValue();
            this.postPrice = postPrice.getValue();
            this.createdAt = createdAt.getValue();
        }
    }
}
